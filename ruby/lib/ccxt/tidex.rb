# -*- coding: utf-8 -*-
# frozen_string_literal: true

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

require_relative 'liqui'

module Ccxt
  class Tidex < Liqui
    def describe
      return self.deep_extend(super, {
        'id' => 'tidex',
        'name' => 'Tidex',
        'countries' => ['UK'],
        'rateLimit' => 2000,
        'version' => '3',
        'has' => {
          # 'CORS' => false,
          # 'fetchTickers' => true
          'fetchCurrencies' => true
        },
        'urls' => {
          'logo' => 'https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg',
          'api' => {
            'web' => 'https://gate.tidex.com/api',
            'public' => 'https://api.tidex.com/api/3',
            'private' => 'https://api.tidex.com/tapi'
          },
          'www' => 'https://tidex.com',
          'doc' => 'https://tidex.com/exchange/public-api',
          'fees' => [
            'https://tidex.com/exchange/assets-spec',
            'https://tidex.com/exchange/pairs-spec'
          ]
        },
        'api' => {
          'web' => {
            'get' => [
              'currency',
              'pairs',
              'tickers',
              'orders',
              'ordershistory',
              'trade-data',
              'trade-data/{id}'
            ]
          }
        },
        'fees' => {
          'trading' => {
            'tierBased' => false,
            'percentage' => true,
            'taker' => 0.1 / 100,
            'maker' => 0.1 / 100
          }
        },
        'commonCurrencies' => {
          'MGO' => 'WMGO',
          'EMGO' => 'MGO'
        }
      })
    end

    def fetch_currencies(params = {})
      currencies = self.webGetCurrency(params)
      result = {}
      for i in (0...currencies.length)
        currency = currencies[i]
        id = currency['symbol']
        precision = currency['amountPoint']
        code = id.upcase
        code = self.common_currency_code(code)
        active = currency['visible'] == true
        canWithdraw = currency['withdrawEnable'] == true
        canDeposit = currency['depositEnable'] == true
        if !canWithdraw || !canDeposit
          active = false
        end
        result[code] = {
          'id' => id,
          'code' => code,
          'name' => currency['name'],
          'active' => active,
          'precision' => precision,
          'funding' => {
            'withdraw' => {
              'active' => canWithdraw,
              'fee' => currency['withdrawFee']
            },
            'deposit' => {
              'active' => canDeposit,
              'fee' => 0.0
            }
          },
          'limits' => {
            'amount' => {
              'min' => nil,
              'max' => 10**precision
            },
            'price' => {
              'min' => 10**-precision,
              'max' => 10**precision
            },
            'cost' => {
              'min' => nil,
              'max' => nil
            },
            'withdraw' => {
              'min' => currency['withdrawMinAmout'],
              'max' => nil
            },
            'deposit' => {
              'min' => currency['depositMinAmount'],
              'max' => nil
            }
          },
          'info' => currency
        }
      end
      return result
    end

    def get_version_string
      return ''
    end

    def sign(path, api = 'public', method = 'GET', params = {}, headers = nil, body = nil)
      url = self.urls['api'][api]
      query = self.omit(params, self.extract_params(path))
      if api == 'private'
        self.check_required_credentials
        nonce = self.nonce
        body = self.urlencode(self.shallow_extend({
          'nonce' => nonce,
          'method' => path
        }, query))
        signature = self.sign_body_with_secret(body)
        headers = {
          'Content-Type' => 'application/x-www-form-urlencoded',
          'Key' => self.apiKey,
          'Sign' => signature
        }
      elsif api == 'public'
        url += self.get_version_string + '/' + self.implode_params(path, params)
        if query
          url += '?' + self.urlencode(query)
        end
      else
        url += '/' + self.implode_params(path, params)
        if method == 'GET'
          if query
            url += '?' + self.urlencode(query)
          end
        else
          if query
            body = self.urlencode(query)
            headers = {
              'Content-Type' => 'application/x-www-form-urlencoded'
            }
          end
        end
      end
      return { 'url' => url, 'method' => method, 'body' => body, 'headers' => headers }
    end
  end
end
