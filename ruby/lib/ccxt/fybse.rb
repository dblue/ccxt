# -*- coding: utf-8 -*-
# frozen_string_literal: true

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

module Ccxt
  class Fybse < Exchange
    def describe
      return self.deep_extend(super, {
        'id' => 'fybse',
        'name' => 'FYB-SE',
        'countries' => ['SE'], # Sweden
        'has' => {
          'CORS' => false
        },
        'rateLimit' => 1500,
        'urls' => {
          'logo' => 'https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg',
          'api' => 'https://www.fybse.se/api/SEK',
          'www' => 'https://www.fybse.se',
          'doc' => 'https://fyb.docs.apiary.io'
        },
        'api' => {
          'public' => {
            'get' => [
              'ticker',
              'tickerdetailed',
              'orderbook',
              'trades'
            ]
          },
          'private' => {
            'post' => [
              'test',
              'getaccinfo',
              'getpendingorders',
              'getorderhistory',
              'cancelpendingorder',
              'placeorder',
              'withdraw'
            ]
          }
        },
        'markets' => {
          'BTC/SEK' => { 'id' => 'SEK', 'symbol' => 'BTC/SEK', 'base' => 'BTC', 'quote' => 'SEK' }
        }
      })
    end

    def fetch_balance(params = {})
      balance = self.privatePostGetaccinfo
      btc = parse_float(balance['btcBal'])
      symbol = self.symbols[0]
      quote = self.markets[symbol]['quote']
      lowercase = quote.downcase + 'Bal'
      fiat = parse_float(balance[lowercase])
      crypto = {
        'free' => btc,
        'used' => 0.0,
        'total' => btc
      }
      result = { 'BTC' => crypto }
      result[quote] = {
        'free' => fiat,
        'used' => 0.0,
        'total' => fiat
      }
      result['info'] = balance
      return self.parse_balance(result)
    end

    def fetch_order_book(symbol, limit = nil, params = {})
      orderbook = self.publicGetOrderbook(params)
      return self.parse_order_book(orderbook)
    end

    def fetch_ticker(symbol, params = {})
      ticker = self.publicGetTickerdetailed(params)
      timestamp = self.milliseconds
      last = nil
      volume = nil
      if ticker.include?('last')
        last = self.safe_float(ticker, 'last')
      end
      if ticker.include?('vol')
        volume = self.safe_float(ticker, 'vol')
      end
      return {
        'symbol' => symbol,
        'timestamp' => timestamp,
        'datetime' => self.iso8601(timestamp),
        'high' => nil,
        'low' => nil,
        'bid' => self.safe_float(ticker, 'bid'),
        'bidVolume' => nil,
        'ask' => self.safe_float(ticker, 'ask'),
        'askVolume' => nil,
        'vwap' => nil,
        'open' => nil,
        'close' => last,
        'last' => last,
        'previousClose' => nil,
        'change' => nil,
        'percentage' => nil,
        'average' => nil,
        'baseVolume' => volume,
        'quoteVolume' => nil,
        'info' => ticker
      }
    end

    def parse_trade(trade, market)
      timestamp = parse_int(trade['date']) * 1000
      return {
        'info' => trade,
        'id' => trade['tid'].to_s,
        'order' => nil,
        'timestamp' => timestamp,
        'datetime' => self.iso8601(timestamp),
        'symbol' => market['symbol'],
        'type' => nil,
        'side' => nil,
        'price' => self.safe_float(trade, 'price'),
        'amount' => self.safe_float(trade, 'amount')
      }
    end

    def fetch_trades(symbol, since = nil, limit = nil, params = {})
      market = self.market(symbol)
      response = self.publicGetTrades(params)
      return self.parse_trades(response, market, since, limit)
    end

    def create_order(symbol, type, side, amount, price = nil, params = {})
      response = self.privatePostPlaceorder(self.shallow_extend({
        'qty' => amount,
        'price' => price,
        'type' => side[0].upcase
      }, params))
      return {
        'info' => response,
        'id' => response['pending_oid']
      }
    end

    def cancel_order(id, symbol = nil, params = {})
      return self.privatePostCancelpendingorder({ 'orderNo' => id })
    end

    def sign(path, api = 'public', method = 'GET', params = {}, headers = nil, body = nil)
      url = self.urls['api'] + '/' + path
      if api == 'public'
        url += '.json'
      else
        self.check_required_credentials
        nonce = self.nonce
        body = self.urlencode(self.shallow_extend({ 'timestamp' => nonce }, params))
        headers = {
          'Content-Type' => 'application/x-www-form-urlencoded',
          'key' => self.apiKey,
          'sig' => self.hmac(self.encode(body), self.encode(self.secret), 'sha1')
        }
      end
      return { 'url' => url, 'method' => method, 'body' => body, 'headers' => headers }
    end

    def request(path, api = 'public', method = 'GET', params = {}, headers = nil, body = nil)
      response = self.fetch2(path, api, method, params, headers, body)
      if api == 'private'
        if response.include?('error')
          if response['error']
            raise(ExchangeError, self.id + ' ' + self.json(response))
          end
        end
      end
      return response
    end
  end
end
