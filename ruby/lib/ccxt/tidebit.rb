# -*- coding: utf-8 -*-
# frozen_string_literal: true

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

module Ccxt
  class Tidebit < Exchange
    def describe
      return self.deep_extend(super, {
        'id' => 'tidebit',
        'name' => 'TideBit',
        'countries' => ['HK'],
        'rateLimit' => 1000,
        'version' => 'v2',
        'has' => {
          'fetchDepositAddress' => true,
          'CORS' => true,
          'fetchTickers' => true,
          'fetchOHLCV' => true,
          'withdraw' => true
        },
        'timeframes' => {
          '1m' => '1',
          '5m' => '5',
          '15m' => '15',
          '30m' => '30',
          '1h' => '60',
          '2h' => '120',
          '4h' => '240',
          '12h' => '720',
          '1d' => '1440',
          '3d' => '4320',
          '1w' => '10080'
        },
        'urls' => {
          'logo' => 'https://user-images.githubusercontent.com/1294454/39034921-e3acf016-4480-11e8-9945-a6086a1082fe.jpg',
          'api' => 'https://www.tidebit.com',
          'www' => 'https://www.tidebit.com',
          'doc' => [
            'https://www.tidebit.com/documents/api/guide',
            'https://www.tidebit.com/swagger/#/default'
          ],
          'referral' => 'http://bit.ly/2IX0LrM'
        },
        'api' => {
          'public' => {
            'get' => [
              'markets',
              'tickers',
              'tickers/{market}',
              'timestamp',
              'trades',
              'trades/{market}',
              'order_book',
              'order',
              'k_with_pending_trades',
              'k',
              'depth'
            ],
            'post' => []
          },
          'private' => {
            'get' => [
              'addresses/{address}',
              'deposits/history',
              'deposits/get_deposit',
              'deposits/deposit_address',
              'historys/orders',
              'historys/vouchers',
              'historys/accounts',
              'historys/snapshots',
              'linkage/get_status',
              'members/me',
              'order',
              'orders',
              'partners/orders/{id}/trades',
              'referral_commissions/get_undeposited',
              'referral_commissions/get_graph_data',
              'trades/my',
              'withdraws/bind_account_list',
              'withdraws/get_withdraw_account',
              'withdraws/fetch_bind_info'
            ],
            'post' => [
              'deposits/deposit_cash',
              'favorite_markets/update',
              'order/delete',
              'orders',
              'orders/multi',
              'orders/clear',
              'referral_commissions/deposit',
              'withdraws/apply',
              'withdraws/bind_bank',
              'withdraws/bind_address'
            ]
          }
        },
        'fees' => {
          'trading' => {
            'tierBased' => false,
            'percentage' => true,
            'maker' => 0.2 / 100,
            'taker' => 0.2 / 100
          },
          'funding' => {
            'tierBased' => false,
            'percentage' => true,
            'withdraw' => {}, # There is only 1% fee on withdrawals to your bank account.
          }
        },
        'exceptions' => {
          '2002' => InsufficientFunds,
          '2003' => OrderNotFound
        }
      })
    end

    def fetch_deposit_address(code, params = {})
      self.load_markets
      currency = self.currency(code)
      response = self.privateGetDepositAddress(self.shallow_extend({
        'currency' => currency['id']
      }, params))
      if response.include?('success')
        if response['success']
          address = self.safe_string(response, 'address')
          tag = self.safe_string(response, 'addressTag')
          return {
            'currency' => code,
            'address' => self.check_address(address),
            'tag' => tag,
            'info' => response
          }
        end
      end
    end

    def fetch_markets(params = {})
      markets = self.publicGetMarkets
      result = []
      for p in (0...markets.length)
        market = markets[p]
        id = market['id']
        symbol = market['name']
        baseId, quoteId = symbol.split('/')
        base = self.common_currency_code(baseId)
        quote = self.common_currency_code(quoteId)
        result.push({
          'id' => id,
          'symbol' => symbol,
          'base' => base,
          'quote' => quote,
          'baseId' => baseId,
          'quoteId' => quoteId,
          'info' => market
        })
      end
      return result
    end

    def fetch_balance(params = {})
      self.load_markets
      response = self.privateGetMembersMe
      balances = response['accounts']
      result = { 'info' => balances }
      for b in (0...balances.length)
        balance = balances[b]
        currencyId = balance['currency']
        code = currencyId.upcase
        if self.currencies_by_id.include?(currencyId)
          code = self.currencies_by_id[currencyId]['code']
        end
        account = {
          'free' => parse_float(balance['balance']),
          'used' => parse_float(balance['locked']),
          'total' => 0.0
        }
        account['total'] = self.sum(account['free'], account['used'])
        result[code] = account
      end
      return self.parse_balance(result)
    end

    def fetch_order_book(symbol, limit = nil, params = {})
      self.load_markets
      market = self.market(symbol)
      request = {
        'market' => market['id']
      }
      if limit.nil?
        request['limit'] = limit
      end # default = 300
      request['market'] = market['id']
      orderbook = self.publicGetDepth(self.shallow_extend(request, params))
      timestamp = orderbook['timestamp'] * 1000
      return self.parse_order_book(orderbook, timestamp)
    end

    def parse_ticker(ticker, market = nil)
      timestamp = ticker['at'] * 1000
      ticker = ticker['ticker']
      symbol = nil
      if market != nil
        symbol = market['symbol']
      end
      last = self.safe_float(ticker, 'last')
      return {
        'symbol' => symbol,
        'timestamp' => timestamp,
        'datetime' => self.iso8601(timestamp),
        'high' => self.safe_float(ticker, 'high'),
        'low' => self.safe_float(ticker, 'low'),
        'bid' => self.safe_float(ticker, 'buy'),
        'ask' => self.safe_float(ticker, 'sell'),
        'bidVolume' => nil,
        'askVolume' => nil,
        'vwap' => nil,
        'open' => nil,
        'close' => last,
        'last' => last,
        'change' => nil,
        'percentage' => nil,
        'previousClose' => nil,
        'average' => nil,
        'baseVolume' => self.safe_float(ticker, 'vol'),
        'quoteVolume' => nil,
        'info' => ticker
      }
    end

    def fetch_tickers(symbols = nil, params = {})
      self.load_markets
      tickers = self.publicGetTickers(params)
      ids = tickers.keys
      result = {}
      for i in (0...ids.length)
        id = ids[i]
        market = nil
        symbol = id
        if self.markets_by_id.include?(id)
          market = self.markets_by_id[id]
          symbol = market['symbol']
        else
          base = id[0...3]
          quote = id[3...6]
          base = base.upcase
          quote = quote.upcase
          base = self.common_currency_code(base)
          quote = self.common_currency_code(quote)
          symbol = base + '/' + quote
        end
        ticker = tickers[id]
        result[symbol] = self.parse_ticker(ticker, market)
      end
      return result
    end

    def fetch_ticker(symbol, params = {})
      self.load_markets
      market = self.market(symbol)
      response = self.publicGetTickersMarket(self.shallow_extend({
        'market' => market['id']
      }, params))
      return self.parse_ticker(response, market)
    end

    def parse_trade(trade, market = nil)
      timestamp = self.parse8601(trade['created_at'])
      return {
        'id' => trade['id'].to_s,
        'timestamp' => timestamp,
        'datetime' => self.iso8601(timestamp),
        'symbol' => market['symbol'],
        'type' => nil,
        'side' => nil,
        'price' => self.safe_float(trade, 'price'),
        'amount' => self.safe_float(trade, 'volume'),
        'cost' => self.safe_float(trade, 'funds'),
        'info' => trade
      }
    end

    def fetch_trades(symbol, since = nil, limit = nil, params = {})
      self.load_markets
      market = self.market(symbol)
      response = self.publicGetTrades(self.shallow_extend({
        'market' => market['id']
      }, params))
      return self.parse_trades(response, market, since, limit)
    end

    def parse_ohlcv(ohlcv, market = nil, timeframe = '1m', since = nil, limit = nil)
      return [
        ohlcv[0] * 1000,
        ohlcv[1],
        ohlcv[2],
        ohlcv[3],
        ohlcv[4],
        ohlcv[5]
      ]
    end

    def fetch_ohlcv(symbol, timeframe = '1m', since = nil, limit = nil, params = {})
      self.load_markets
      market = self.market(symbol)
      if limit.nil?
        limit = 30
      end # default is 30
      request = {
        'market' => market['id'],
        'period' => self.timeframes[timeframe],
        'limit' => limit
      }
      if since != nil
        request['timestamp'] = since
      else
        request['timestamp'] = 1800000
      end
      response = self.publicGetK(self.shallow_extend(request, params))
      return self.parse_ohlcvs(response, market, timeframe, since, limit)
    end

    def parse_order(order, market = nil)
      symbol = nil
      if market != nil
        symbol = market['symbol']
      else
        marketId = order['market']
        symbol = self.markets_by_id[marketId]['symbol']
      end
      timestamp = self.parse8601(order['created_at'])
      state = order['state']
      status = nil
      if state == 'done'
        status = 'closed'
      elsif state == 'wait'
        status = 'open'
      elsif state == 'cancel'
        status = 'canceled'
      end
      return {
        'id' => order['id'].to_s,
        'timestamp' => timestamp,
        'datetime' => self.iso8601(timestamp),
        'lastTradeTimestamp' => nil,
        'status' => status,
        'symbol' => symbol,
        'type' => order['ord_type'],
        'side' => order['side'],
        'price' => self.safe_float(order, 'price'),
        'amount' => self.safe_float(order, 'volume'),
        'filled' => self.safe_float(order, 'executed_volume'),
        'remaining' => self.safe_float(order, 'remaining_volume'),
        'trades' => nil,
        'fee' => nil,
        'info' => order
      }
    end

    def create_order(symbol, type, side, amount, price = nil, params = {})
      self.load_markets
      request = {
        'market' => self.market_id(symbol),
        'side' => side,
        'volume' => amount.to_s,
        'ord_type' => type
      }
      if type == 'limit'
        request['price'] = price.to_s
      end
      response = self.privatePostOrders(self.shallow_extend(request, params))
      market = self.markets_by_id[response['market']]
      return self.parse_order(response, market)
    end

    def cancel_order(id, symbol = nil, params = {})
      self.load_markets
      result = self.privatePostOrderDelete({ 'id' => id })
      order = self.parse_order(result)
      status = order['status']
      if status == 'closed' || status == 'canceled'
        raise(OrderNotFound, self.id + ' ' + self.json(order))
      end
      return order
    end

    def withdraw(code, amount, address, tag = nil, params = {})
      self.check_address(address)
      self.load_markets
      currency = self.currency(code)
      id = self.safe_string(params, 'id')
      if id.nil?
        raise(ExchangeError, self.id + ' withdraw requires an extra id param(withdraw account id according to withdraws/bind_account_list endpoint')
      end
      request = {
        'id' => id,
        'currency_type' => 'coin', # or 'cash'
        'currency' => currency.downcase,
        'body' => amount,
        # 'address' => address, # they don't allow withdrawing to direct addresses?
      }
      if tag != nil
        request['memo'] = tag
      end
      result = self.privatePostWithdrawsApply(self.shallow_extend(request, params))
      return {
        'info' => result,
        'id' => nil
      }
    end

    def nonce
      return self.milliseconds
    end

    def encode_params(params)
      return self.urlencode(self.keysort(params))
    end

    def sign(path, api = 'public', method = 'GET', params = {}, headers = nil, body = nil)
      request = '/' + 'api/' + self.version + '/' + self.implode_params(path, params) + '.json'
      query = self.omit(params, self.extract_params(path))
      url = self.urls['api'] + request
      if api == 'public'
        if query
          url += '?' + self.urlencode(query)
        end
      else
        self.check_required_credentials
        nonce = self.nonce.to_s
        sortedByKey = self.keysort(self.shallow_extend({
          'access_key' => self.apiKey,
          'tonce' => nonce
        }, params))
        query = self.urlencode(sortedByKey)
        payload = method + '|' + request + '|' + query
        signature = self.hmac(self.encode(payload), self.encode(self.secret))
        suffix = query + '&signature=' + signature
        if method == 'GET'
          url += '?' + suffix
        else
          body = suffix
          headers = { 'Content-Type' => 'application/x-www-form-urlencoded' }
        end
      end
      return { 'url' => url, 'method' => method, 'body' => body, 'headers' => headers }
    end

    def handle_errors(code, reason, url, method, headers, body, response)
      if code == 400
        error = self.safe_value(response, 'error')
        errorCode = self.safe_string(error, 'code')
        feedback = self.id + ' ' + self.json(response)
        exceptions = self.exceptions
        if exceptions.include?(errorCode)
          raise(exceptions[errorCode], feedback)
        end
        # fallback to default error handler
      end
    end
  end
end
